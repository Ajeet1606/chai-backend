Project Setup:
- npm init
- create Readme.md 
- git init
- create gitignore
- create public & public/temp for storing images or some static files.
- git doesn't track empty folders, so we add a .gitkeep file for now.
- install nodemon for restarting the server on each update.
- create src
- create app.js, constants.js & index.js in src.
- create folders: controllers, db, models, routes, utils.
- install prettier on project basis not on vs code: when multiple people are working on same project, they can have different spacing config etc, which can lead to conflicts sometimes, so when prettier is working inside project, it has a localized setting, it keeps same for all.
- to setup prettier:
    - create file .prettierrc in root.
    - create .prettierignore file: to not apply prettier settings in some files.


------------------------------------ DATABASE CONNECTION --------------------------------
- create a project in your mongodb atlas org.
- create a user in database access.
- setup your IP in network access.
- get MONGODB_URI and add it into .env file.
- install dotenv for proper usage of env variables.
- install mongoose for database connection.
- always remember db connection is async.

------------------------------------ dotenv setup ---------------------------------------
- to get the env variables working and imported properly, we use dotenv package.
- it provides only commonjs method of importing, which is:
    "require('dotenv).config({path: 'path of .env'})"

- but here we want to use modulejs method of import, so we use an expermental trick to get it done.
1. import dotenv from "dotenv";
dotenv.config({path: 'path of env'})
2. add "-r dotenv/config --experimental-json-modules" in your dev command, which now looks like:
"dev": "nodemon -r dotenv/config --experimental-json-modules src/index.js"

---------------------------------- MIDDLEWARES ------------------------------------
- a layer of software that sits between the core application logic and the server, acting as a bridge for incoming requests and outgoing responses. it helps us in performing various tasks in req, res cycle.
[req, res] cycle:
client req -> middleware -> core application logic -> middleware -> server sends response

definition: Middleware (also called pre and post hooks) are functions which are passed control during execution of asynchronous functions. Middleware is specified on the schema level and is useful for writing plugins.

types:
1. Document middleware
2. Model middleware
3. Aggregate middleware
4. Query middleware

- CORS is a middleware example, to use them, we do app.use(cors())
- app.use is used to setup middlewares or do some configuration.

- Standard Error and response format setup.

----------------------- lecture 9 -------------------
- create user & video models
- install mongoose-aggregate-paginate-v2 package.

- install bcrypt and jsonwebtoken for password encryption/decryption and getting tokens respectively.
- we use all above 3 packages in user/video models.

- how do we use them?
- mongoose provides some middlewares/hooks, one such is pre hook which runs just before saving data into model on every call, so we do our work using this.

JWT: it is a bearer token.
JWT library gives us tokens but it takes some values to create them:
- payload
- privateKeys
- expiry
there's are multiple ways to do depending on what data we're using to create.


------------------------ lecture 10 --------------------
-- file uploading:
- cloud storage providers: cloudinary
- packages to help file uploading: multer, express-fileupload

install cloudinary & multer packages.

process: take file from frontend, store on our backend server temporarily, now upload it on cloud provider (takes file path from server, stores on cloud and then deletes from server, as unlinking), for safety purpose we stored it on backend as well, if we failed to upload on cloud once, we can try again.


------------------------ lecture 11: HTTP Crash Course --------------------------
- Hyper text transfer protocol
URL: Uniform resource locator
URI: Uniform resource identifier
URN: Uniform resource name

HTTP Headers: 
- meatadata/information being shared over the network requests along with req, res. format: key-value
- some headers are predefined, we can add ours also.
Uses: in caching, auth, state management

Categories of headers:

Request headers: from client
Response headers: from server
Representation headers: encoding/compression
Payload headers: data
etc.

Most Common Headers:
- Accept: application/json
- User-Agent: info about sender of req(postman/browser-type/phone etc)
- Authorization: Bearer token
- Content-type: img/pdf/text etc.
- Cookie: key-value
- Cache-control: time to expire data etc..


CORS:
- Access-Control-Allow-Origin
- Access-Control-Allow-Credentials
- Access-Control-Allow-Method


Security:
- Cross-Origin-Embedder-Policy
- Cross-Origin-Opener-Policy
- Content-Security-Policy
- X-XSS-Protection

HTTP Methods:
Basic set of operations that can be used to interact with server.

GET: retrieve a resource
HEAD: No msg body (res headers only)
OPTIONS: what operations are available
TRACE: loopback test (get same data)    //read more.
DELETE: remove a resource
PUT: replace a resource
POST: create a resource
PATCH: change a part of resource.

HTTP Status Codes:

1xx     Informational
2xx     Success
3xx     Redirection
4xx     Client Error
5xx     Server Error

examples:

100     Continue
101     Switching Protocols
102     Processing
103     Early Hints

200     Ok
201     Created
202     Accepted
203     Non Authoritative information
204     No Content
205     Reset Content
206     Partial Content
207     Multi Status
208     Already reported
226     instance manupulation used

300     Multiple Choices
301     Moved Permanently
302     found
303     See other
304     Not modifed
305     use proxy(deprecated)
306     unused
307     Temporarily redirect
308     Permanent redirect

400     Bad Request
401     Unauthorized/unauthenticated
402     Payment required
403     Forbidden
404     Not found
405     Method not allowed
406     Not Acceptable
407     Proxy auth required
408     Request Timeout
409     Conflict
410     Gone/deleted
411     Content-length header required

500     Internal server Error
502     Bad Gateway
503     Service unavailable
504     Gateway times out.

401:
You need to provide valid credentials (such as a username and password) to access this resource, but you haven't provided them or the ones you provided are incorrect.

403:
You are authenticated, but you are not allowed to access this resource. It's forbidden.(insufficient permission)


301 & 308:
- they denote that the resource has been moved to a new location Permanently and return a location header with new URL.
- browsers automatically redirect to the new URL.
- for 301, Redirection request method becomes GET but in 308, it remains same as earlier one.